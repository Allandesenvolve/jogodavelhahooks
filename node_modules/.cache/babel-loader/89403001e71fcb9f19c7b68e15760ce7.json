{"ast":null,"code":"var _jsxFileName = \"C:\\\\GIT-PROJETO\\\\teste\\\\tictactoe\\\\src\\\\TicTacToe.js\";\nimport React, { useState, useEffect } from 'react';\nimport './TicTacToe.css';\n\nfunction TicTacToe() {\n  const emptyBoard = Array(9).fill(\"\");\n  const [board, setBoard] = useState(emptyBoard);\n  const [currentPlayer, setCurrentPlayer] = useState(\"O\");\n  const [winner, setWinner] = useState();\n\n  const handleCellClick = index => {\n    if (winner) {\n      console.timeLog(\"Jogo finalizado\");\n      return null;\n    }\n\n    if (board[index] !== \"\") {\n      console.timeLog(\"Posição ocupada\");\n      return null;\n    }\n\n    setBoard(board.map((item, itemIndex) => itemIndex === index ? currentPlayer : item));\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n  };\n\n  const checkWinner = () => {\n    const possibleWaysToWin = [[board[0], board[1], board[2]], [board[3], board[4], board[5]], [board[6], board[7], board[8]], [board[0], board[3], board[6]], [board[1], board[4], board[7]], [board[2], board[5], board[8]], [board[0], board[4], board[8]], [board[2], board[4], board[6]]];\n    possibleWaysToWin.forEach(cells => {\n      if (cells.every(cell => cell === \"O\")) setWinner(\"O venceu!\");\n      if (cells.every(cell => cell === \"X\")) setWinner(\"X venceu!\");\n    });\n  };\n\n  useEffect(checkWinner, [board]);\n\n  resetGame = () => {\n    setCurrentPlayer(\"O\");\n    setBoard(emptyBoard);\n    setWinner(null);\n  };\n\n  return React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Jogo da velha\"), React.createElement(\"div\", {\n    className: `board $(winner ? \"game-over\" : \"\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, board.map((item, index) => React.createElement(\"div\", {\n    key: index,\n    className: `cell ${item}`,\n    onClick: () => handleCellClick(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, item))), winner && React.createElement(\"footer\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"winner-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: winner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, winner), \" venceu!\"), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \" Recome\\xE7ar o jogo!     \")));\n}\n\nexport default TicTacToe;","map":{"version":3,"sources":["C:/GIT-PROJETO/teste/tictactoe/src/TicTacToe.js"],"names":["React","useState","useEffect","TicTacToe","emptyBoard","Array","fill","board","setBoard","currentPlayer","setCurrentPlayer","winner","setWinner","handleCellClick","index","console","timeLog","map","item","itemIndex","checkWinner","possibleWaysToWin","forEach","cells","every","cell","resetGame"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TicTacToe.css';\n\nfunction TicTacToe() {\n  const emptyBoard = Array(9).fill(\"\");\n\n  const [board, setBoard] = useState(emptyBoard);\n  const [currentPlayer, setCurrentPlayer] = useState(\"O\");\n  const [winner, setWinner] = useState();\n\n  const handleCellClick = (index) => {\n    if (winner) {\n      console.timeLog(\"Jogo finalizado\");\n      return null;\n    }\n\n    if (board[index] !== \"\") {\n      console.timeLog(\"Posição ocupada\");\n      return null;\n  }\n\n    setBoard(\n      board.map((item, itemIndex) => itemIndex === index ? currentPlayer : item)\n    );\n\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\": \"X\");\n\n  }\n\n  const checkWinner = () => {\n    const  possibleWaysToWin = [\n      [board[0], board[1], board[2]],\n      [board[3], board[4], board[5]],\n      [board[6], board[7], board[8]],\n\n      [board[0], board[3], board[6]],\n      [board[1], board[4], board[7]],\n      [board[2], board[5], board[8]],\n\n      [board[0], board[4], board[8]],\n      [board[2], board[4], board[6]],\n    ];\n\n    possibleWaysToWin.forEach(cells => {\n      if (cells.every(cell => cell === \"O\")) setWinner(\"O venceu!\");\n      if (cells.every(cell => cell === \"X\")) setWinner(\"X venceu!\");\n    });\n  }\n\n  useEffect(checkWinner, [board]);\n\n  resetGame = () => {\n    setCurrentPlayer(\"O\");\n    setBoard(emptyBoard)\n    setWinner(null);\n\n  }\n\n\n  return (\n    <main>    \n      <h1 className=\"title\">Jogo da velha</h1>\n\n      <div className={`board $(winner ? \"game-over\" : \"\"}`}>\n        {board.map((item, index) => (\n          <div \n            key={index}         \n            className={`cell ${item}`}\n            onClick={() => handleCellClick(index)}\n            >\n\n            {item}\n          </div>\n      ))}\n    </div>\n\n\n\n{winner &&\n\n  <footer>\n    <h2 className=\"winner-message\"> \n      <span className={winner}>{winner}</span> venceu!\n   </h2>\n\n\n\n    <button> Recomeçar o jogo!     </button>\n  </footer>\n}\n</main>  \n    \n  );\n}\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}